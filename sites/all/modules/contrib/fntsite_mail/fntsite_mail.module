<?php
/**
 * @file
 * A mail and templating system, written by JmOkay.
 */

/**
 * Implements hook_user_insert().
 */
function fntsite_mail_user_insert(&$edit, $account, $category) {

  $new_user_id = $account->uid;
  // Register a function to run at the end of drupal creating a page.
  drupal_register_shutdown_function('_fntsite_mail_after_user_insert', $new_user_id);

}

function _fntsite_mail_after_user_insert($new_user_id) {

  // Send message to Admin.
  $admin_user = user_load(98);
  $new_user = user_load($new_user_id);
  $template_ref = 'email_to_admin_review_new_registration';

  $mail = new FntsiteMailNotify();
  $mail->addUser2($new_user);
  $mail->sendMail($admin_user, $template_ref);


  // Send message to New user.
  $admin_user = user_load(1);
  $template_ref = 'email_to_regestering_user_being_reviewed';
  $mail = new FntsiteMailNotify();
  $mail->sendMail($new_user, $template_ref);

}



/**
 * Implements hook_mail().
 *
 * This hook defines a list of possible e-mail templates that this module can
 * send. Each e-mail is given a unique identifier, or 'key'.
 *
 * $message comes in with some standard properties already set: 'to' address,
 * 'from' address, and a set of default 'headers' from drupal_mail(). The goal
 * of hook_mail() is to set the message's 'subject' and 'body' properties, as
 * well as make any adjustments to the headers that are necessary.
 *
 * The $params argument is an array which can hold any additional data required
 * to build the mail subject and body; for example, user-entered form data, or
 * some context information as to where the mail request came from.
 *
 * Note that hook_mail() is not actually a hook. It is only called for a single
 * module, the module named in the first argument of drupal_mail(). So it's
 * a callback of a type, but not a hook.
 */
function fntsite_mail_mail($key, &$message, $params) {
  global $user;

  // Each message is associated with a language, which may or may not be the
  // current user's selected language, depending on the type of e-mail being
  // sent. This $options array is used later in the t() calls for subject
  // and body to ensure the proper translation takes effect.
  $options = array(
    'langcode' => $message['language']->language,
  );

  switch ($key) {
    // Send a simple message from the contact form.
    case 'fntsite_mail':
      $message['subject'] = t('E-mail sent from @site-name', array('@site-name' => variable_get('site_name', 'Drupal')), $options);
      // Note that the message body is an array, not a string.
//      $message['body'][] = t('@name sent you the following message:', array('@name' => $user->name), $options);
      $message['body'][] = '';
      // Because this is just user-entered text, we do not need to translate it.
      // Since user-entered text may have unintentional HTML entities in it like
      // '<' or '>', we need to make sure these entities are properly escaped,
      // as the body will later be transformed from HTML to text, meaning
      // that a normal use of '<' will result in truncation of the message.
      $message['body'][] = check_plain($params['message']);
      break;
  }
}
